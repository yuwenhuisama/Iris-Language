diff a/IrisLangLibrary/src/IrisComponents/IrisExpressions/IrisFieldExpression.cpp b/IrisLangLibrary/src/IrisComponents/IrisExpressions/IrisFieldExpression.cpp	(rejected hunks)
@@ -16,24 +16,12 @@
 
   	if (m_pFieldIdentifier->m_pList) {
 		list<IR_DWORD> lsFieldMembers;
-		//m_pFieldIdentifier->m_pList->Ergodic(
-		//	[&](IrisIdentifier*& pIdentifier) -> bool {
-
-		//	if (pIdentifier->GetType() != IrisIdentifilerType::Constance) {
-		//		// ** Error **
-		//		IrisFatalErrorHandler::CurrentFatalHandler()->ShowFatalErrorMessage(IrisFatalErrorHandler::FatalErrorType::IdenfierTypeIrregular, m_nLineNumber, pCompiler->GetCurrentFileIndex(), "Identifier of " +  pIdentifier->GetIdentifierString()  + " is not a CONSTANCE.");
-		//		return false;
-		//	}
-
-		//	lsFieldMembers.push_back(pCompiler->GetIdentifierIndex(pIdentifier->GetIdentifierString(), pCompiler->GetCurrentFileIndex()));
-		//	return true;
-		//}
-		//);
+
 		auto& lsField = m_pFieldIdentifier->m_pList->m_lsList;
 
 		auto iFirstField = lsField.begin();
 
-		//lsFieldMembers.push_back(pCompiler->GetIdentifierIndex((*iFirstField)->GetIdentifierString(), pCompiler->GetCurrentFileIndex()));
+		lsFieldMembers.push_back(pCompiler->GetIdentifierIndex((*iFirstField)->GetIdentifierString(), pCompiler->GetCurrentFileIndex()));
 
 		unsigned int nIndex = pCompiler->GetIdentifierIndex((*iFirstField)->GetIdentifierString(), pCompiler->GetCurrentFileIndex());
 
